// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  phone     String?
  
  // Campos Premium
  isPremium        Boolean   @default(false)
  premiumPlan      String?   // "monthly", "yearly", "lifetime"
  premiumStartDate DateTime?
  premiumEndDate   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos com outras tabelas do app de finanças
  accounts     Account[]
  transactions Transaction[]
  categories   Category[]
  goals        Goal[]
  cards        Card[]
  subscriptions Subscription[]

  @@map("users")
}

model Account {
  id        String   @id @default(cuid())
  name      String
  type      String   // "checking", "savings", "investment", etc.
  balance   Decimal  @default(0)
  color     String?
  icon      String?
  isActive  Boolean  @default(true)
  includeInTotal Boolean @default(true) // Nova coluna para checkbox
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  categories   Category[] // <- relação inversa para categorias por conta

  @@map("accounts")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String   // "income" ou "expense"
  color     String?
  icon      String?
  userId    String
  accountId String? // <- Adicionado para vincular categoria à conta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account?      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Decimal
  description String
  type        String   // "income" ou "expense"
  date        DateTime
  accountId   String
  categoryId  String
  userId      String
  
  // Novos campos para parcelamento e lançamentos
  title              String?   // Título da transação
  paymentMethod      String?   // "cash", "pix", "card"
  cardId             String?   // ID do cartão se paymentMethod for "card"
  launchType         String    @default("unico") // "unico", "recorrente", "parcelado"
  installments       Int?      // Número de parcelas/recorrências
  currentInstallment Int?      // Parcela atual (para parceladas)
  valorComoParcela   Boolean   @default(false) // Se o valor é por parcela ou total
  recurrenceType     String?   // "Anual", "Mensal", "Semanal"
  parentTransactionId String?  // ID da transação pai (para parcelas/recorrências)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  card     Card?    @relation(fields: [cardId], references: [id], onDelete: SetNull)
  
  // Auto-relacionamento para transações pai/filha
  parentTransaction Transaction? @relation("TransactionHierarchy", fields: [parentTransactionId], references: [id], onDelete: Cascade)
  childTransactions Transaction[] @relation("TransactionHierarchy")

  @@map("transactions")
}

model Goal {
  id          String   @id @default(cuid())
  name        String
  targetAmount Decimal
  currentAmount Decimal @default(0)
  targetDate  DateTime?
  color       String?
  icon        String?
  isCompleted Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Card {
  id         String   @id @default(cuid())
  name       String
  type       String   // "credit", "debit"
  icon       String?  // nome do ícone
  limit      Decimal?
  closingDay Int?     // dia de fechamento
  dueDay     Int?     // dia de vencimento
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("cards")
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  plan          String   // "monthly", "yearly", "lifetime"
  status        String   // "active", "expired", "cancelled", "pending"
  startDate     DateTime
  endDate       DateTime?
  amount        Decimal
  currency      String   @default("BRL")
  paymentMethod String?  // "credit_card", "pix", "boleto", etc.
  
  // Dados do pagamento/gateway
  transactionId String?  // ID da transação do gateway de pagamento
  gatewayData   Json?    // Dados extras do gateway (Stripe, PagSeguro, etc.)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model PremiumPlan {
  id          String  @id @default(cuid())
  name        String  // "Mensal", "Anual", "Vitalício"
  code        String  @unique // "monthly", "yearly", "lifetime"
  price       Decimal
  currency    String  @default("BRL")
  duration    Int?    // duração em dias (null para lifetime)
  features    Json    // lista de recursos disponíveis
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("premium_plans")
}
